drop policy "Enable delete for users based on user_id" on "public"."postings";

drop policy "Enable insert for users based on user_id" on "public"."postings";

drop policy "Enable read access for all users" on "public"."postings";

drop policy "Enable update for users based on user_id" on "public"."postings";

revoke delete on table "public"."postings" from "anon";

revoke insert on table "public"."postings" from "anon";

revoke references on table "public"."postings" from "anon";

revoke select on table "public"."postings" from "anon";

revoke trigger on table "public"."postings" from "anon";

revoke truncate on table "public"."postings" from "anon";

revoke update on table "public"."postings" from "anon";

revoke delete on table "public"."postings" from "authenticated";

revoke insert on table "public"."postings" from "authenticated";

revoke references on table "public"."postings" from "authenticated";

revoke select on table "public"."postings" from "authenticated";

revoke trigger on table "public"."postings" from "authenticated";

revoke truncate on table "public"."postings" from "authenticated";

revoke update on table "public"."postings" from "authenticated";

revoke delete on table "public"."postings" from "service_role";

revoke insert on table "public"."postings" from "service_role";

revoke references on table "public"."postings" from "service_role";

revoke select on table "public"."postings" from "service_role";

revoke trigger on table "public"."postings" from "service_role";

revoke truncate on table "public"."postings" from "service_role";

revoke update on table "public"."postings" from "service_role";

alter table "public"."postings" drop constraint "postings_user_id_fkey";

alter table "public"."likes" drop constraint "likes_post_id_fkey";

alter table "public"."postings" drop constraint "postings_pkey";

drop index if exists "public"."postings_pkey";

drop table "public"."postings";

create table "public"."posts" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "media" text[] not null,
    "title" text,
    "description" text,
    "location" text,
    "rating" real,
    "user_id" uuid not null
);


alter table "public"."posts" enable row level security;

CREATE UNIQUE INDEX postings_pkey ON public.posts USING btree (id);

alter table "public"."posts" add constraint "postings_pkey" PRIMARY KEY using index "postings_pkey";

alter table "public"."posts" add constraint "posts_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) not valid;

alter table "public"."posts" validate constraint "posts_user_id_fkey";

alter table "public"."likes" add constraint "likes_post_id_fkey" FOREIGN KEY (post_id) REFERENCES posts(id) not valid;

alter table "public"."likes" validate constraint "likes_post_id_fkey";

grant delete on table "public"."posts" to "anon";

grant insert on table "public"."posts" to "anon";

grant references on table "public"."posts" to "anon";

grant select on table "public"."posts" to "anon";

grant trigger on table "public"."posts" to "anon";

grant truncate on table "public"."posts" to "anon";

grant update on table "public"."posts" to "anon";

grant delete on table "public"."posts" to "authenticated";

grant insert on table "public"."posts" to "authenticated";

grant references on table "public"."posts" to "authenticated";

grant select on table "public"."posts" to "authenticated";

grant trigger on table "public"."posts" to "authenticated";

grant truncate on table "public"."posts" to "authenticated";

grant update on table "public"."posts" to "authenticated";

grant delete on table "public"."posts" to "service_role";

grant insert on table "public"."posts" to "service_role";

grant references on table "public"."posts" to "service_role";

grant select on table "public"."posts" to "service_role";

grant trigger on table "public"."posts" to "service_role";

grant truncate on table "public"."posts" to "service_role";

grant update on table "public"."posts" to "service_role";

create policy "Enable delete for users based on user_id"
on "public"."posts"
as permissive
for delete
to authenticated
using ((auth.uid() = user_id));


create policy "Enable insert for users based on user_id"
on "public"."posts"
as permissive
for insert
to authenticated
with check ((auth.uid() = user_id));


create policy "Enable read access for all users"
on "public"."posts"
as permissive
for select
to public
using (true);


create policy "Enable update for users based on user_id"
on "public"."posts"
as permissive
for update
to authenticated
using ((auth.uid() = user_id))
with check ((auth.uid() = user_id));



